.TH "file_concepts" 3 "Sun Jun 23 2024" "Libmagicxx" \" -*- nroff -*-
.ad l
.nh
.SH NAME
file_concepts
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "std::string \fBto_string\fP (const \fBfile_container\fP auto &container, const std::string &separator=', ')"
.br
.RI "Convert the file container to a string\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "template<typename ContainerType > concept \fBfile_container\fP"
.br
.RI "The file_container concept specifies the requirements of a container which can be used as a file container by the magic class\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "std::string file_concepts::to_string (const \fBfile_container\fP auto & container, const std::string & separator = \fC', '\fP)\fC [inline]\fP"

.PP
Convert the file container to a string\&. 
.PP
\fBParameters\fP
.RS 4
\fIcontainer\fP The container that holds the paths of the files\&. 
.br
\fIseparator\fP The separator between the paths of the files, default is ', '\&.
.RE
.PP
\fBReturns\fP
.RS 4
The container as a string\&. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "template<typename ContainerType > concept file_concepts::file_container"
\fBInitial value:\fP
.PP
.nf
=
        requires (ContainerType c, std::filesystem::path p){
            c\&.push_back(p);
            c\&.empty();
            typename ContainerType::value_type;
        } &&
        std::ranges::range<ContainerType> &&
        std::default_initializable<ContainerType> &&
        std::same_as<typename ContainerType::value_type, std::filesystem::path>
.fi
.PP
The file_container concept specifies the requirements of a container which can be used as a file container by the magic class\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Libmagicxx from the source code\&.
